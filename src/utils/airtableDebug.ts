import { airtableService } from '../services/airtableService'

/**
 * Debug utility to help identify Airtable schema issues
 * Call from browser console: window.airtableDebug.testSchema()
 */

export const testAirtableSchema = async () => {
  console.log('üîç Testing Airtable schema...')
  
  // Test with minimal data first - using separate date and time
  const testEvent = {
    title: 'Test Event Schema',
    description: 'Testing the Airtable schema with separate date and time fields',
    date: '2024-12-01',
    time: '10:00',
    location: 'Test Location',
    capacity: 10,
    organizerId: 'test-organizer-123'
  }
  
  try {
    console.log('üì§ Attempting to create test event with date string format...')
    const result = await airtableService.createEvent(testEvent)
    console.log('‚úÖ Success! Event created:', result)
    return result
  } catch (error) {
    console.log('‚ùå Failed with date string format:', error)
    
    // If that fails, let's try to inspect what fields are expected
    if (error instanceof Error && error.message.includes('Unknown field name')) {
      const fieldMatch = error.message.match(/Unknown field name: "([^"]+)"/)
      if (fieldMatch) {
        console.log(`üîç Unknown field: ${fieldMatch[1]}`)
        console.log('üí° This suggests the Airtable schema doesn\'t have this field')
      }
    }
    
    if (error instanceof Error && error.message.includes('cannot accept the provided value')) {
      console.log('üí° This suggests the field exists but the value format is wrong')
      console.log('üîÑ The service will now try ISO datetime format automatically')
    }
    
    return error
  }
}

export const listAirtableEvents = async () => {
  console.log('üìã Attempting to list existing events to understand schema...')
  
  try {
    // Try to get events by a test organizer
    const events = await airtableService.getEventsByOrganizer('test-organizer')
    console.log('‚úÖ Events retrieved:', events)
    
    if (events.length > 0) {
      console.log('üìä Sample event structure:', events[0])
    } else {
      console.log('üì≠ No events found for test organizer')
    }
    
    return events
  } catch (error) {
    console.log('‚ùå Failed to retrieve events:', error)
    return error
  }
}

export const debugAirtableConnection = async () => {
  console.log('üîó Testing Airtable connection...')
  
  try {
    // Try a simple GET request to see if connection works
    const response = await fetch(`https://api.airtable.com/v0/${import.meta.env.VITE_AIRTABLE_BASE_ID}/Events?maxRecords=1`, {
      headers: {
        'Authorization': `Bearer ${import.meta.env.VITE_AIRTABLE_API_KEY}`,
        'Content-Type': 'application/json'
      }
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Connection successful!')
      console.log('üìä Sample response:', data)
      
      if (data.records && data.records.length > 0) {
        console.log('üèóÔ∏è Actual field structure:', Object.keys(data.records[0].fields))
        console.log('üìã Field details:', data.records[0].fields)
      } else {
        console.log('üì≠ No existing records found')
      }
      
      return data
    } else {
      console.log('‚ùå Connection failed:', response.status, response.statusText)
      const errorData = await response.text()
      console.log('üìÑ Error response:', errorData)
      return { error: errorData, status: response.status }
    }
  } catch (error) {
    console.log('‚ùå Connection error:', error)
    return error
  }
}

export const testFieldCombinations = async () => {
  console.log('üß™ Testing different field name combinations...')
  
  const testCombinations = [
    // Combination 1: Your exact schema (lowercase with underscores)
    {
      name: 'Your Exact Schema',
      data: {
        title: 'Test Event - Exact Schema',
        description: 'Test with your exact field names',
        date: new Date('2024-12-01T10:00:00').toISOString(),
        location: 'Test Location',
        capacity: 10,
        organizer_id: 'test-org-exact'
        // Note: created_at and updated_at are auto-generated by Airtable
      }
    },
    // Combination 2: Minimal required fields only
    {
      name: 'Minimal Fields',
      data: {
        title: 'Test Event - Minimal',
        description: 'Test with minimal fields',
        date: new Date('2024-12-01T10:00:00').toISOString(),
        location: 'Test Location',
        capacity: 10,
        organizer_id: 'test-org-minimal'
      }
    },
    // Combination 3: Alternative naming
    {
      name: 'Alternative Names',
      data: {
        name: 'Test Event - Alt Names',
        desc: 'Test with alternative names',
        event_date: '2024-12-01T10:00:00.000Z',
        venue: 'Test Location',
        max_capacity: 10,
        organizer: 'test-org-alt'
      }
    }
  ]
  
  for (const combination of testCombinations) {
    console.log(`\nüîç Testing ${combination.name}...`)
    
    try {
      const response = await fetch(`https://api.airtable.com/v0/${import.meta.env.VITE_AIRTABLE_BASE_ID}/Events`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.VITE_AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          records: [{ fields: combination.data }]
        })
      })
      
      if (response.ok) {
        const result = await response.json()
        console.log(`‚úÖ ${combination.name} worked!`, result)
        return { success: combination.name, data: result }
      } else {
        const error = await response.text()
        console.log(`‚ùå ${combination.name} failed:`, error)
      }
    } catch (error) {
      console.log(`‚ùå ${combination.name} error:`, error)
    }
  }
  
  console.log('üèÅ All combinations tested')
}

// Make functions available globally for console testing
if (typeof window !== 'undefined') {
  ;(window as any).airtableDebug = {
    testSchema: testAirtableSchema,
    listEvents: listAirtableEvents,
    debugConnection: debugAirtableConnection,
    testFieldCombinations: testFieldCombinations
  }
  
  console.log('üîß Airtable debug utilities available at window.airtableDebug')
  console.log('üìã Available methods:')
  console.log('  - debugConnection(): Check connection and see actual fields')
  console.log('  - testFieldCombinations(): Test different field name patterns')
  console.log('  - testSchema(): Test event creation with current schema')
  console.log('  - listEvents(): List existing events')
}